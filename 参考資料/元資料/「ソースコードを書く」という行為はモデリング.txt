2009年8月27日(木) 15:15～16:25
Tech·Ed Japan 2009

『美しいソース コードのための考え方 ～マルチパラダイム時代のプログラムの書き方～ 』by 小島 富治雄 (Fujiwo)

BOF-08
『美しいソース コードのための考え方 ～マルチパラダイム時代のプログラムの書き方～』

一昨年の Tech・Ed では、BoF-09「今改めて語り合いたい。オブジェクト指向プログ
ラミングをマスタするコツ」、そして、昨年は、BOF-12「プログラミング! プログラ
ミング! プログラミング! .NET 3.5 時代のコーディング ～これからの実装技術につ
いて考えよう～」
(http://www.event-marketing.jp/events/te08/special/bof/bof_12.htm) で、実装
周りを中心とし、聴衆と熱く有意義な語り合いを行いました。


今年は、更に、M言語や並列プログラミング、クラウド、Visual Studio 2010など、
近未来のマイクロソフトの技術に向けて、プログラマーの原点であるプログラミング
技術に更に磨きをかけるべく、更に熱く語り合っていきたいと思います。

なんだかんだ言っても開発者はプログラミングを愛していて、多くのこだわりを持っ
ています。大いに盛り上げていけること間違いないと思います。


> ■ 概要 (400字)
> 美しいソースコードを書くにはどのようにすれば良いのでしょうか?
>
> マルチパラダイム プログラミングが現実的なものとなりつつあります。Windows
> プログラミングの初期の頃一般的だった命令型プログラミングに加え、オブジェ
> クト指向型プログラミング、関数型プログラミング、宣言型プログラミングやド
> メイン特化言語、更には、並列プログラミングまでもが、.NET Framework や
> Visual Studio の進化によって、身近なものとなりつつあります。
>
> そんな中、どのようにこれらのパラダイムを利用しつつ、読みやすくテストしや
> すいシンプルなプログラムを書いていくのが良いか、一緒に考えてみませんか。
>
> ・スケーラビリティを持ったクラウド時代のプログラムの書き方。
> ・ドメイン特化言語の現実的解の一つM言語を用いた現場に合った DSL によるシ
> ンプルなソースコード。
> ・最新のツールを使いこなしたきれいなコードとは。
>

「ソースコードを書く」という行為はモデリング

モデル
	設計モデル＋実装モデル

「ソースコードを書く」という行為は
設計＋実装＋テスト

モデリングなので

プログラミング言語が重要

	モデルを書くのに適した言語

	DSL (ドメイン特化言語)


モデルとは
	「関心の分離」

	Separate of Concern

何をモデルにしたものか?

意図をモデリング

例えば、C# では、

「従業員リスト内の全ての各従業員を画面に出力する」
のソースコードは、

従業員リスト.ForAll(各従業員 => 各従業員.出力(画面));

と書かれたりする


なんで

従業員リスト.ForAll(各従業員 => 各従業員.出力(画面));

このソースコードが

for (int i = 0; i < 従業員リスト.Count; i++)
    出力(従業員リスト[i]);

より良いか?


「この場合は」、

「整数 i を 0 にし、i が 従業員リストの Count までの間、i をインクリメントしながら、従業員リストの i 番目を出力」
という意図のモデルじゃなく、

「従業員リスト内の全ての各従業員を画面に出力する」

のモデルだから。


「従業員リスト内の全ての各従業員を画面に出力する」

のモデルとしては、

従業員リスト.ForAll(各従業員 => 各従業員.出力(画面));

が (ベストではないが) ベター。

つまり

仮に
「整数 i を 0 にし、i が 従業員リストの Count までの間、i をインクリメントしながら、従業員リストの i 番目を出力」
という意図のモデルだったら、

for (int i = 0; i < 従業員リスト.Count; i++)
    出力(従業員リスト[i]);

が

従業員リスト.ForAll(各従業員 => 各従業員.出力(画面));

よりベター。

なんで

従業員リスト.ForAll(各従業員 => 各従業員.出力(画面));

このソースコードが

l.ForAll(x => x.Func(s));

より良いか?


「この場合は」、

「l 内の全ての各 x を s を使って Func する」
という意図のモデルじゃなく、

「従業員リスト内の全ての各従業員を画面に出力する」

のモデルだから。


仮に
「l 内の全ての各 x を s を使って Func する」
という意図のモデルだったら、

l.ForAll(x => x.Func(s));

が

従業員リスト.ForAll(各従業員 => 各従業員.出力(画面));

よりベター。


なんで

従業員リスト.ForAll(各従業員 => 各従業員.出力(画面));

このソースコードが

employeeList.ForAll(employee => employee.Output(screen));

より良いか?


「この場合は」、

「employee 内の全ての各 employee を screen に Output する」
という意図のモデルじゃなく、

「従業員リスト内の全ての各従業員を画面に出力する」

のモデルだから。

でも

「従業員リスト内の全ての各従業員を画面に出力する」

という意図のモデルだったら、

従業員リスト.ForAll(各従業員 => 各従業員.出力(画面));

でなく

と書かれても良い。

そう。

C# のような汎用言語より、DSL (ドメイン特化言語) の方が、よりピュアにモデルを書くことができる可能性がある。

モデルがピュアであることが重要?

モデルはピュアであることが重要。

なぜならば

モデルとは

「関心事を抽出すること」

だから

「意図をモデル化する」ためのものがソースコード

「意図以外のものが書かれない方が良い」

「従業員リスト内の全ての各従業員を画面に出力する」
が意図なら、

for (int i = 0; i < 従業員リスト.Count; i++)
    出力(従業員リスト[i]);

の

「int」、「i」、「=」、「<」、「Count」、「i++」、「[i]」

は「意図以外」のもの (＝モデルにとっては「ノイズ」)。

従業員リスト.ForAll(各従業員 => 各従業員.出力(画面));

の方がノイズが少ない。


モデリング
名前付けが決定的に重要


「名前を付ける」

	とは「関心事」を抽出すること


「プログラムは関心事に対して書かれているべき」

ボトルネックの部分が最大の関心事


よくないソース

例.


異なる抽象度・粒度の関心事が混ざっている


アルゴリズムのモデル

	Generic


ホットスポットが最大の関心事
テスト
チーム開発
再利用性
ドメイン

関心を分離したものがモデル

「きれいなソースコードに対する或る反論」

「実務ではきれいなソースコードより重視される
例えば、チーム開発を円滑に進めるために、オブジェクト指向的にきれいでない分割をするべきこともある。」

「チーム開発がホットスポット」なら、それが最大の関心事。
それに合うように分割することが、「きれいな分割」。


「ソースコードの美しさよりも動くかどうかの方が重要」

「論点がずれている。」
「『きれいなソースコード』と『動くプログラム』を比較する理由がない」

「『きれいなソースコード』と『汚いソースコード』の比較は、『はやく保守性が高い動くプログラムが書き上がる』のが良いか、『保守性が低い動くプログラムが中々書き上がらない』のが良いか、の比較」


「プログラムは関心事に対して書かれているべき」

ボトルネックの部分が最大の関心事


単一責務の法則


FAQ

	var 

	IEnumerable<従業員> 


	var 人事部の従業員の一覧 = 従業員名簿.Where(従業員.部署.名称 == "人事部").OrderBy(従業員 => 従業員.氏名);


「良いソースコードかどうか」を判断するには?

説明責任 (accountability) が果たされているか?


FAQ.


コメントは不要?


Q. モデルは一意ではない?

A. もちろん。ひとによってソースコードは違う

	顧客からみたモデル
	開発者のモデル


・ソースコードについて書いたプログラマが説明できるか?

「このメソッドは、何故このクラスに在る?」

「この変数は、どうしてこの名前?」
「このメソッドの、仕事をひとことでいうと何?」

・ソースコードについて他のプログラマが説明できるか?

・「このクラス [or オブジェクト, メソッド, 変数...] の、仕事を「ひとこと」でいうと何?」

× 「ひとことでは言えない」→ 単一責務になってない!
○ 「そのひとこと」が名前になっている。







マルチ パラダイム

手続き型プログラミング ⇔ オブジェクト指向型プログラミング ⇔ 関数型プログラミング
命令型プログラミング ⇔ 宣言型プログラミング
テキスト型プログラミング ⇔ 図解型プログラミング
ジェネリック・プログラミング
並列プログラミング

などの組み合わせ

C#、Visual Basic は、最新のものほど、マルチパラダイム プログラミング言語化

例.

オブジェクト指向
関数型プログラミング

