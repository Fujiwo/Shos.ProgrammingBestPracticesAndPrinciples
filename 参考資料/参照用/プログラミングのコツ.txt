・フィードバックの最大化

ツールやテスト、レビューでフィードバックを最速にする
見える化

・語彙を作る
クラスやメソッド、変数で語彙を作ってそれでロジックを記述

・バグ滞在時間の最小化

・インターフェイスを作る
・インターフェイスと実装の分離
・Why と What の記述
・記述の粒度を揃える
・テストしやすくなるように分ける
・名前をつける
・Think Simple.

・仕様に対してテスト、実装する

・分割する
・変更しやすいように分ける

普通の英語

	SV: 主語 (Subject) - 動詞 (Verb)
	
	※ 動詞は原則自動詞
	※ 自動詞には受動態がない
	
	The line intersects with another line. (その線は別の線と交差する。)
	
	※ この場合の intersect は自動詞
	
	The line intersects another line.  : × この intersect は自動詞なので目的語を取れない。前置詞が必要。
	
	
	コード:
	    if (line.Intersect(anotherLine)) 
	        ...
	× 三人称単数なのに動詞の後ろの s がない
	× 三人称単数なのに動詞の後ろの s がない
	
	    if (line.IntersectsWith(anotherLine))
	        ...
	
	SVO: 主語 (Subject) - 動詞 (Verb) - 目的語 (Object)
	動詞は他動詞

Model を分けてテスト
二重ループなど書かない
配列の配列は一次元配列

関数の仕様
    How じゃなく What
関数の実装
    How じゃなく What 

モデルに抽象化する
関数は汎用的に作る

問題の切り分け

複雑な問題を解くにはどうしたら良いか。
複雑な問題を解くような羽目に陥らないようにする。

